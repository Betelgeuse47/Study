#include <iostream>
#include <cstdio>
using namespace std;
#define  MAXSIZE  1001          //顺序表的最大长度
typedef struct
{
    int key;
    char *otherinfo;
}ElemType;
//顺序表的存储结构
typedef struct
{
    ElemType r[MAXSIZE];           //存储空间的基地址
    int  length;            //顺序表长度
}SqList; //顺序表类型

void InsertSort(SqList &L)
{
   //对顺序表L做直接插入排序
    int i,j;
    for(i=2;i<=L.length;++i)
    if(L.r[i].key<L.r[i-1].key)
    {    //"<"，需将r[i]插入有序子表
            L.r[0]=L.r[i]; //将待插入的记录暂存到监视哨中
            L.r[i]=L.r[i-1];             //r[i-1]后移
            for(j=i-2; L.r[0].key<L.r[j].key;--j) //从后向前寻找插入位置
            L.r[j+1]=L.r[j]; //记录逐个后移，直到找到插入位置
            L.r[j+1]=L.r[0]; //将r[0]即原r[i]，插入到正确位置
    } //if
}



int main(void)
{
    int i,n,m;
    scanf("%d",&n);
    m=n+1;
    SqList L;
    L.length=n;
    for(i=1;i<m;i++)
    {
        scanf("%d",&L.r[i].key);
    }
    InsertSort(L);
    for(i=1;i<m;i++)
    {
        printf("%d ",L.r[i].key);
    }


}


/*//算法8.2 折半插入排序
void BInsertSort(SqList &L){
    //对顺序表L做折半插入排序
    int i,j,low,high,m;
    for(i=2;i<=L.length;++i)
    {
        L.r[0]=L.r[i];          //将待插入的记录暂存到监视哨中
        low=1; high=i-1;        //置查找区间初值
        while(low<=high)
        { //在r[low..high]中折半查找插入的位置
            m=(low+high)/2;              //折半
            if(L.r[0].key<L.r[m].key)  high=m-1; //插入点在前一子表
            else  low=m+1;     //插入点在后一子表
        }//while
        for(j=i-1;j>=high+1;--j)  L.r[j+1]=L.r[j]; //记录后移
        L.r[high+1]=L.r[0]; //将r[0]即原r[i]，插入到正确位置
    } //for
}
*/
